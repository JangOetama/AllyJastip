name: Scrape Products

on:
  workflow_dispatch:
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'  # Setiap hari pukul 00:00

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      # Step 4: Run scraping script directly in the workflow
      - name: Scrape Products
        run: |
          import requests
          from bs4 import BeautifulSoup
          import json

          # URL dan data POST untuk login
          login_url = 'https://feelbuyshop.com/preorderjastip/?f=login'
          login_data = {
              'username': '085161117349',
              'submit': ''
          }

          # URL untuk halaman produk
          product_url = 'https://feelbuyshop.com/preorderjastip/?f=home'

          # Session untuk menyimpan cookie setelah login
          session = requests.Session()

          # Melakukan POST request untuk login
          response = session.post(login_url, data=login_data)

          # Melakukan GET request untuk mendapatkan halaman produk
          product_page = session.get(product_url)

          # Parsing halaman produk
          soup = BeautifulSoup(product_page.content, 'html.parser')

          # Mengambil data produk
          products = []
          for item in soup.select('#mydivproduct .product__item'):
              name = item.select_one('.product__item__text h6').text.strip()
              original_price = item.select_one('.product__item__text h5 s').text.strip()
              discounted_price = item.select_one('.product__item__text h5').text.strip().split('<sup')[0].strip()
              discount_percentage = item.select_one('.product__item__text h5 sup font').text.strip()

              products.append({
                  'name': name,
                  'originalPrice': original_price,
                  'discountedPrice': discounted_price,
                  'discountPercentage': discount_percentage
              })

          # Menyimpan data produk ke file JSON
          with open('products.json', 'w') as f:
              json.dump(products, f)

          print("Scraping selesai. Data disimpan ke products.json")
        shell: python

      # Step 5: Commit and Push Changes
      - name: Commit and Push Changes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Update products.json"
            git push https://${{ secrets.GH_TOKEN }}@github.com/JangOetama/AllyJastip.git HEAD:main
          else
            echo "No changes to commit"
          fi

      # Optional: Debugging step to verify token
      - name: Debug Token
        run: echo "${{ secrets.GH_TOKEN }}"
